import os
import streamlit as st
from theme_manager import create_tooltip
from PIL import Image
from logger import get_logger

# Configurar logger
logger = get_logger('documentation')

# Directorio para im√°genes y recursos
DOCS_DIR = os.path.join(os.getcwd(), 'docs')
os.makedirs(DOCS_DIR, exist_ok=True)

# Im√°genes est√°ticas para la documentaci√≥n
IMAGES = {
    'main_screen': os.path.join(DOCS_DIR, 'main_screen.png'),
    'vehicle_form': os.path.join(DOCS_DIR, 'vehicle_form.png'),
    'service_history': os.path.join(DOCS_DIR, 'service_history.png'),
    'stats_dashboard': os.path.join(DOCS_DIR, 'stats_dashboard.png'),
    'maintenance_schedule': os.path.join(DOCS_DIR, 'maintenance_schedule.png')
}

# Diccionario de tooltips para cada formulario
TOOLTIPS = {
    # Veh√≠culos
    'patente': 'Formato de patente Mercosur: AA123BB, o formato antiguo: ABC123',
    'area': 'Departamento o √°rea a la que est√° asignado el veh√≠culo',
    'tipo': 'Categor√≠a del veh√≠culo seg√∫n su tipo y uso',
    'marca': 'Marca del fabricante del veh√≠culo',
    'modelo': 'Modelo espec√≠fico del veh√≠culo',
    'a√±o': 'A√±o de fabricaci√≥n del veh√≠culo, entre 1950 y el a√±o actual',
    'km': 'Kilometraje actual del veh√≠culo',
    'estado': 'Estado operativo actual del veh√≠culo',
    'rori': 'N√∫mero de identificaci√≥n RORI (si aplica)',
    'id_vehiculo': 'N√∫mero de identificaci√≥n interno del veh√≠culo',
    'vtv_vencimiento': 'Fecha de vencimiento de la Verificaci√≥n T√©cnica Vehicular',
    
    # Servicios
    'fecha_service': 'Fecha en que se realiz√≥ el servicio',
    'tipo_service': 'Categor√≠a del servicio realizado',
    'taller': 'Nombre del taller o lugar donde se realiz√≥ el servicio',
    'costo': 'Costo total del servicio en pesos',
    'descripcion': 'Detalle de las tareas realizadas y repuestos utilizados',
    
    # Incidentes
    'tipo_incidente': 'Categor√≠a del incidente (Accidente, Aver√≠a, etc.)',
    'estado_incidente': 'Estado actual del incidente (Pendiente, Resuelto, etc.)',
    
    # Mantenimiento programado
    'fecha_programada': 'Fecha planificada para realizar el mantenimiento',
    'km_programado': 'Kilometraje al que se debe realizar el mantenimiento',
    'descripcion_mant': 'Detalles de las tareas a realizar',
    
    # Otros
    'pdf_files': 'Archivos PDF con documentaci√≥n relacionada (facturas, informes, etc.)'
}

def get_tooltip_html(field_name):
    """
    Genera el HTML para un tooltip.
    
    Args:
        field_name: Nombre del campo para el que se genera el tooltip
    
    Returns:
        str: HTML con el tooltip o texto vac√≠o si no existe
    """
    if field_name in TOOLTIPS:
        return create_tooltip(
            '‚ùì', 
            TOOLTIPS[field_name]
        )
    return ''

def styled_header(title, tooltip=None, icon=None):
    """
    Crea un encabezado con estilo y tooltip opcional.
    
    Args:
        title: T√≠tulo del encabezado
        tooltip: Texto del tooltip (opcional)
        icon: Icono a mostrar (opcional)
    """
    icon_html = f"{icon} " if icon else ""
    tooltip_html = f" {get_tooltip_html(tooltip)}" if tooltip else ""
    
    st.markdown(
        f"<h3 style='color: #3872E0; margin-bottom: 10px;'>{icon_html}{title}{tooltip_html}</h3>",
        unsafe_allow_html=True
    )

def display_manual():
    """
    Muestra el manual de usuario en la interfaz.
    """
    st.title("Manual de Usuario - Sistema de Gesti√≥n de Flota Vehicular")
    
    # Tabla de contenidos
    st.sidebar.title("Contenido")
    sections = [
        "Introducci√≥n",
        "Gesti√≥n de Veh√≠culos",
        "Registros de Servicio",
        "Incidentes",
        "Programaci√≥n de Mantenimiento",
        "Estad√≠sticas y Reportes",
        "Administraci√≥n",
        "Resoluci√≥n de Problemas"
    ]
    
    selected_section = st.sidebar.radio("Ir a:", sections)
    
    # Secci√≥n de introducci√≥n
    if selected_section == "Introducci√≥n":
        st.header("Introducci√≥n")
        
        st.write("""
        El Sistema de Gesti√≥n de Flota Vehicular es una herramienta integral dise√±ada para optimizar la administraci√≥n
        de flotas de veh√≠culos. Este sistema permite el seguimiento detallado de veh√≠culos, mantenimientos,
        incidentes y proporaciona an√°lisis estad√≠sticos para la toma de decisiones.
        """)
        
        st.subheader("Caracter√≠sticas principales")
        features = {
            "üöó Gesti√≥n de veh√≠culos": "Registro completo de datos de cada veh√≠culo, incluyendo kilometraje, estado y documentaci√≥n.",
            "üîß Mantenimientos": "Seguimiento de historial de servicios y programaci√≥n de mantenimientos futuros.",
            "‚ö†Ô∏è Incidentes": "Registro y seguimiento de incidentes y aver√≠as.",
            "üìä Estad√≠sticas": "An√°lisis y reportes sobre costos, uso y estado de la flota.",
            "üì± Alertas": "Notificaciones por email para mantenimientos programados y vencimientos de VTV.",
            "üìÅ Documentaci√≥n": "Almacenamiento digital de facturas y documentos relacionados."
        }
        
        for key, value in features.items():
            st.markdown(f"**{key}:** {value}")
        
        st.subheader("Acceso al sistema")
        st.write("""
        Para acceder al sistema, ingrese con su nombre de usuario y contrase√±a en la pantalla de inicio.
        El sistema ofrece diferentes niveles de acceso:
        
        - **Administrador**: Acceso completo a todas las funcionalidades.
        - **Gestor**: Puede administrar veh√≠culos y mantenimientos, pero no tiene acceso a configuraciones avanzadas.
        - **Usuario**: Puede visualizar informaci√≥n y generar reportes, pero no puede realizar modificaciones.
        """)
        
        # Mostrar imagen si existe
        if os.path.exists(IMAGES.get('main_screen', '')):
            try:
                image = Image.open(IMAGES['main_screen'])
                st.image(image, caption="Pantalla principal del sistema", use_column_width=True)
            except Exception as e:
                logger.error(f"Error al cargar imagen: {str(e)}")
        else:
            st.info("La imagen de la pantalla principal no est√° disponible.")
    
    # Secci√≥n de gesti√≥n de veh√≠culos
    elif selected_section == "Gesti√≥n de Veh√≠culos":
        st.header("Gesti√≥n de Veh√≠culos")
        
        st.write("""
        La gesti√≥n de veh√≠culos es una funcionalidad central del sistema que permite registrar,
        actualizar y consultar toda la informaci√≥n relevante sobre cada unidad de la flota.
        """)
        
        st.subheader("Agregar un nuevo veh√≠culo")
        st.write("""
        Para agregar un nuevo veh√≠culo al sistema:
        
        1. Seleccione "Agregar Veh√≠culo" en el men√∫ lateral.
        2. Complete el formulario con todos los datos del veh√≠culo.
        3. Los campos marcados con * son obligatorios.
        4. Puede adjuntar documentaci√≥n en formato PDF (opcional).
        5. Haga clic en "Guardar" para registrar el veh√≠culo.
        """)
        
        # Informaci√≥n sobre campos
        st.subheader("Descripci√≥n de campos")
        
        campos = {
            "Patente*": "Identificador √∫nico del veh√≠culo. " + TOOLTIPS.get('patente', ''),
            "√Årea*": "Departamento o √°rea a la que est√° asignado el veh√≠culo.",
            "Tipo*": "Categor√≠a del veh√≠culo (AUTO, CAMIONETA, MOTO, etc.).",
            "Marca*": "Marca del fabricante.",
            "Modelo*": "Modelo espec√≠fico del veh√≠culo.",
            "A√±o*": "A√±o de fabricaci√≥n, debe ser entre 1950 y el a√±o actual.",
            "Estado*": "Estado operativo (SERVICIO, RECUPERAR, RADIADO).",
            "Kilometraje": "Od√≥metro actual del veh√≠culo.",
            "ID Veh√≠culo": "N√∫mero de identificaci√≥n interno asignado al veh√≠culo.",
            "RORI": "N√∫mero de identificaci√≥n RORI si aplica.",
            "Vencimiento VTV": "Fecha de vencimiento de la Verificaci√≥n T√©cnica Vehicular.",
            "Fecha √∫ltimo service": "Fecha en que se realiz√≥ el √∫ltimo mantenimiento.",
            "Taller": "Nombre del taller donde se realiz√≥ el √∫ltimo service.",
            "Observaciones": "Notas adicionales sobre el veh√≠culo."
        }
        
        # Mostrar campos en dos columnas
        col1, col2 = st.columns(2)
        
        items = list(campos.items())
        mid = len(items) // 2
        
        with col1:
            for key, value in items[:mid]:
                st.markdown(f"**{key}:** {value}")
        
        with col2:
            for key, value in items[mid:]:
                st.markdown(f"**{key}:** {value}")
        
        # Importaci√≥n desde CSV
        st.subheader("Importaci√≥n masiva de veh√≠culos")
        st.write("""
        El sistema permite la importaci√≥n masiva de veh√≠culos desde archivos CSV:
        
        1. Prepare un archivo CSV con las columnas necesarias (patente, √°rea, tipo, marca, modelo, a√±o, estado, km).
        2. Vaya a la pesta√±a "Importar desde CSV" en la pantalla de Agregar Veh√≠culo.
        3. Seleccione el archivo y haga clic en "Importar veh√≠culos".
        4. El sistema validar√° los datos y mostrar√° resultados de la importaci√≥n.
        """)
        
        st.subheader("Editar veh√≠culo")
        st.write("""
        Para modificar los datos de un veh√≠culo existente:
        
        1. Seleccione "Editar Veh√≠culo" en el men√∫ lateral.
        2. Seleccione el veh√≠culo a editar de la lista desplegable.
        3. Actualice los campos necesarios.
        4. Haga clic en "Guardar cambios".
        """)
        
        # Mostrar imagen si existe
        if os.path.exists(IMAGES.get('vehicle_form', '')):
            try:
                image = Image.open(IMAGES['vehicle_form'])
                st.image(image, caption="Formulario de veh√≠culo", use_column_width=True)
            except Exception as e:
                logger.error(f"Error al cargar imagen: {str(e)}")
        
        st.info("‚ÑπÔ∏è Todos los cambios quedan registrados en el historial del sistema para auditor√≠a.")
    
    # Secci√≥n de registros de servicio
    elif selected_section == "Registros de Servicio":
        st.header("Registros de Servicio")
        
        st.write("""
        El m√≥dulo de registros de servicio permite documentar todos los mantenimientos, reparaciones
        y servicios realizados a los veh√≠culos de la flota.
        """)
        
        st.subheader("Agregar un nuevo registro de servicio")
        st.write("""
        Para agregar un nuevo registro de servicio:
        
        1. Seleccione "Registrar Service" en el men√∫ lateral.
        2. Seleccione el veh√≠culo para el que desea registrar el servicio.
        3. Complete el formulario con los detalles del servicio.
        4. Adjunte documentaci√≥n de respaldo si es necesario (facturas, informes).
        5. Haga clic en "Guardar" para registrar el servicio.
        """)
        
        # Descripci√≥n de campos
        st.subheader("Descripci√≥n de campos")
        
        campos_service = {
            "Fecha*": "Fecha en que se realiz√≥ el servicio.",
            "Kilometraje*": "Lectura del od√≥metro al momento del servicio.",
            "Tipo de servicio*": "Categor√≠a del servicio (ej. Cambio de aceite, Service completo).",
            "Taller*": "Nombre del taller o proveedor que realiz√≥ el servicio.",
            "Costo*": "Costo total del servicio en pesos.",
            "Descripci√≥n*": "Detalle de las tareas realizadas y repuestos utilizados.",
            "Documentaci√≥n adjunta": "Archivos PDF con facturas u otros documentos relacionados."
        }
        
        for key, value in campos_service.items():
            st.markdown(f"**{key}:** {value}")
        
        st.subheader("Consultar historial de servicios")
        st.write("""
        Para consultar el historial de servicios:
        
        1. Seleccione "Historial de Service" en el men√∫ lateral.
        2. Puede filtrar por veh√≠culo espec√≠fico o ver todos los registros.
        3. Los registros se muestran ordenados por fecha (m√°s recientes primero).
        4. Puede descargar el historial completo en formato Excel o CSV.
        """)
        
        # Mostrar imagen si existe
        if os.path.exists(IMAGES.get('service_history', '')):
            try:
                image = Image.open(IMAGES['service_history'])
                st.image(image, caption="Historial de servicios", use_column_width=True)
            except Exception as e:
                logger.error(f"Error al cargar imagen: {str(e)}")
        
        st.subheader("Extracci√≥n autom√°tica de datos de facturas")
        st.write("""
        El sistema cuenta con OCR (Reconocimiento √ìptico de Caracteres) para extraer autom√°ticamente
        informaci√≥n de facturas y documentos PDF:
        
        1. Al adjuntar un documento PDF, el sistema intentar√° extraer:
           - Fecha del servicio
           - Monto
           - Kilometraje
           - N√∫mero de factura
           - Patente del veh√≠culo
        
        2. Los datos extra√≠dos se sugieren autom√°ticamente en el formulario.
        3. Siempre verifique la informaci√≥n extra√≠da antes de guardar.
        """)
        
        st.info("‚ÑπÔ∏è Los servicios registrados actualizan autom√°ticamente el kilometraje y la fecha del √∫ltimo service del veh√≠culo.")
    
    # Secci√≥n de incidentes
    elif selected_section == "Incidentes":
        st.header("Gesti√≥n de Incidentes")
        
        st.write("""
        El m√≥dulo de incidentes permite registrar y dar seguimiento a eventos como accidentes,
        aver√≠as, robos u otras situaciones que afecten a los veh√≠culos de la flota.
        """)
        
        st.subheader("Registrar un nuevo incidente")
        st.write("""
        Para registrar un nuevo incidente:
        
        1. Seleccione "Registrar Incidente" en el men√∫ lateral.
        2. Seleccione el veh√≠culo involucrado en el incidente.
        3. Complete el formulario con los detalles del incidente.
        4. Adjunte documentaci√≥n relevante (fotos, denuncias, informes).
        5. Haga clic en "Guardar" para registrar el incidente.
        """)
        
        # Descripci√≥n de campos
        st.subheader("Descripci√≥n de campos")
        
        campos_incidente = {
            "Fecha*": "Fecha en que ocurri√≥ el incidente.",
            "Tipo*": "Categor√≠a del incidente (Accidente, Aver√≠a, Robo, Otro).",
            "Descripci√≥n*": "Detalle completo del incidente, incluyendo circunstancias y consecuencias.",
            "Estado*": "Estado actual del incidente (PENDIENTE, EN PROCESO, RESUELTO, CERRADO).",
            "Documentaci√≥n adjunta": "Archivos PDF con informes, denuncias, presupuestos u otros documentos."
        }
        
        for key, value in campos_incidente.items():
            st.markdown(f"**{key}:** {value}")
        
        st.subheader("Consultar y gestionar incidentes")
        st.write("""
        Para consultar y gestionar incidentes:
        
        1. Seleccione "Ver Incidentes" en el men√∫ lateral.
        2. Los incidentes se muestran ordenados por fecha (m√°s recientes primero).
        3. Puede filtrar por veh√≠culo o por estado del incidente.
        4. Para actualizar el estado de un incidente, selecci√≥nelo y use la opci√≥n "Actualizar estado".
        5. Los incidentes pendientes se muestran en el panel de inicio para seguimiento.
        """)
        
        st.warning("‚ö†Ô∏è Los incidentes no resueltos por m√°s de 30 d√≠as se destacan autom√°ticamente para seguimiento prioritario.")
        
        st.subheader("Indicadores de gesti√≥n de incidentes")
        st.write("""
        El sistema proporciona indicadores para evaluar la gesti√≥n de incidentes:
        
        - **Tiempo medio de resoluci√≥n**: Promedio de d√≠as entre el registro y la resoluci√≥n de incidentes.
        - **Distribuci√≥n por tipo**: Cantidad de incidentes por categor√≠a.
        - **Veh√≠culos con mayor incidencia**: Ranking de veh√≠culos por cantidad de incidentes.
        - **Tendencia temporal**: Evoluci√≥n de incidentes a lo largo del tiempo.
        """)
        
        st.info("‚ÑπÔ∏è Estos indicadores se pueden consultar en la secci√≥n 'Estad√≠sticas de Flota'.")
    
    # Secci√≥n de programaci√≥n de mantenimiento
    elif selected_section == "Programaci√≥n de Mantenimiento":
        st.header("Programaci√≥n de Mantenimiento")
        
        st.write("""
        Este m√≥dulo permite planificar y dar seguimiento a los mantenimientos futuros de los veh√≠culos,
        estableciendo recordatorios basados en fechas o kilometraje.
        """)
        
        st.subheader("Programar un nuevo mantenimiento")
        st.write("""
        Para programar un nuevo mantenimiento:
        
        1. Seleccione "Programar Mantenimiento" en el men√∫ lateral.
        2. Seleccione el veh√≠culo para el que desea programar mantenimiento.
        3. Complete el formulario definiendo si el mantenimiento se basa en:
           - Una fecha espec√≠fica
           - Un kilometraje espec√≠fico
           - Ambos criterios
        4. Especifique el tipo de servicio a realizar.
        5. Haga clic en "Guardar" para programar el mantenimiento.
        """)
        
        # Descripci√≥n de campos
        st.subheader("Descripci√≥n de campos")
        
        campos_programacion = {
            "Fecha programada": "Fecha en que debe realizarse el mantenimiento.",
            "Kilometraje programado": "Lectura del od√≥metro a la que debe realizarse el mantenimiento.",
            "Tipo de servicio*": "Categor√≠a del servicio a realizar.",
            "Descripci√≥n*": "Detalle de las tareas a realizar.",
            "Generar recordatorio": "Si debe enviarse una notificaci√≥n cuando se aproxime la fecha."
        }
        
        for key, value in campos_programacion.items():
            st.markdown(f"**{key}:** {value}")
        
        # Mostrar imagen si existe
        if os.path.exists(IMAGES.get('maintenance_schedule', '')):
            try:
                image = Image.open(IMAGES['maintenance_schedule'])
                st.image(image, caption="Programaci√≥n de mantenimiento", use_column_width=True)
            except Exception as e:
                logger.error(f"Error al cargar imagen: {str(e)}")
        
        st.subheader("Consultar mantenimientos programados")
        st.write("""
        Para consultar los mantenimientos programados:
        
        1. Seleccione "Ver Programaci√≥n" en el men√∫ lateral.
        2. Los mantenimientos se muestran ordenados por fecha/kilometraje.
        3. Puede filtrar por veh√≠culo o por estado.
        4. Para marcar un mantenimiento como completado, selecci√≥nelo y use la opci√≥n "Marcar como completado".
        5. Al marcar como completado, se puede registrar autom√°ticamente un nuevo servicio basado en la programaci√≥n.
        """)
        
        st.subheader("Sistema de recordatorios")
        st.write("""
        El sistema env√≠a recordatorios autom√°ticos para mantenimientos programados:
        
        - Por **fecha**: Se env√≠an recordatorios 7 d√≠as antes de la fecha programada.
        - Por **kilometraje**: Se env√≠an recordatorios cuando el veh√≠culo est√° a 500 km del umbral programado.
        - Los recordatorios se env√≠an por email a las direcciones configuradas.
        - En la p√°gina principal se muestra un resumen de mantenimientos pr√≥ximos.
        """)
        
        st.info("‚ÑπÔ∏è Configure los destinatarios de recordatorios en la secci√≥n 'Configuraci√≥n > Recordatorios'.")
    
    # Secci√≥n de estad√≠sticas y reportes
    elif selected_section == "Estad√≠sticas y Reportes":
        st.header("Estad√≠sticas y Reportes")
        
        st.write("""
        El m√≥dulo de estad√≠sticas y reportes proporciona an√°lisis detallados sobre la flota
        y herramientas para generar informes personalizados.
        """)
        
        st.subheader("Dashboard de estad√≠sticas")
        st.write("""
        Para acceder al dashboard de estad√≠sticas:
        
        1. Seleccione "Estad√≠sticas de Flota" en el men√∫ lateral.
        2. El dashboard muestra:
           - Resumen general de la flota
           - Distribuci√≥n por tipo, √°rea y estado
           - An√°lisis de costos de mantenimiento
           - Veh√≠culos con mayor kilometraje
           - Alertas de VTV pr√≥ximas a vencer
        """)
        
        # Mostrar imagen si existe
        if os.path.exists(IMAGES.get('stats_dashboard', '')):
            try:
                image = Image.open(IMAGES['stats_dashboard'])
                st.image(image, caption="Dashboard de estad√≠sticas", use_column_width=True)
            except Exception as e:
                logger.error(f"Error al cargar imagen: {str(e)}")
        
        st.subheader("Herramientas de reporte")
        st.write("""
        El sistema ofrece diversas herramientas para generar reportes:
        
        1. **Exportaci√≥n de datos**: Permite exportar cualquier tabla a formato Excel o CSV.
        2. **Env√≠o por email**: Env√≠a reportes directamente por correo electr√≥nico.
        3. **Gr√°ficos interactivos**: Visualizaciones que pueden personalizarse y descargarse.
        4. **Filtros avanzados**: Permite filtrar datos por m√∫ltiples criterios.
        """)
        
        st.subheader("An√°lisis predictivo")
        st.write("""
        El sistema incluye capacidades de an√°lisis predictivo:
        
        - **Predicci√≥n de costos**: Estima costos futuros de mantenimiento basados en hist√≥rico.
        - **Previsi√≥n de mantenimientos**: Calcula cu√°ndo se requerir√°n pr√≥ximos servicios.
        - **Alertas predictivas**: Identifica veh√≠culos con mayor probabilidad de incidencias.
        - **Comparativas**: Permite comparar rendimiento entre veh√≠culos similares.
        """)
        
        st.subheader("Reportes personalizados")
        st.write("""
        Para crear reportes personalizados:
        
        1. Seleccione la tabla base para el reporte.
        2. Aplique filtros seg√∫n necesite.
        3. Seleccione las columnas a incluir.
        4. Elija el formato de salida (Excel, CSV, PDF).
        5. Descargue el reporte o env√≠elo por email.
        """)
        
        st.info("‚ÑπÔ∏è Todos los reportes incluyen fecha y hora de generaci√≥n y pueden incluir el logo institucional si est√° configurado.")
    
    # Secci√≥n de administraci√≥n
    elif selected_section == "Administraci√≥n":
        st.header("Administraci√≥n del Sistema")
        
        st.write("""
        El m√≥dulo de administraci√≥n permite configurar diversos aspectos del sistema
        y est√° disponible s√≥lo para usuarios con rol de administrador.
        """)
        
        st.subheader("Configuraci√≥n de la base de datos")
        st.write("""
        Para gestionar la base de datos:
        
        1. Acceda a "Configuraci√≥n > Base de Datos" en el men√∫.
        2. Desde all√≠ puede:
           - Inicializar o reiniciar la base de datos
           - Crear copias de seguridad
           - Restaurar desde copias previas
           - Exportar/importar datos
        
        Se recomienda crear copias de seguridad regulares para prevenir p√©rdida de datos.
        """)
        
        st.subheader("Importaci√≥n de datos")
        st.write("""
        El sistema permite importar datos masivamente:
        
        1. Acceda a "Configuraci√≥n > Importaci√≥n de Datos".
        2. Seleccione el archivo CSV con los datos a importar.
        3. Verifique la vista previa para asegurar que los datos son correctos.
        4. Confirme la importaci√≥n.
        
        El sistema validar√° los datos antes de importarlos y mostrar√° un resumen del resultado.
        """)
        
        st.subheader("Configuraci√≥n de recordatorios")
        st.write("""
        Para configurar el sistema de recordatorios:
        
        1. Acceda a "Configuraci√≥n > Recordatorios".
        2. Configure las direcciones de correo electr√≥nico que recibir√°n notificaciones.
        3. Establezca los par√°metros para alertas:
           - D√≠as de anticipaci√≥n para mantenimientos programados
           - D√≠as de anticipaci√≥n para vencimientos de VTV
           - Frecuencia de env√≠o de recordatorios
        """)
        
        st.subheader("Personalizaci√≥n de la interfaz")
        st.write("""
        El sistema permite personalizar la interfaz:
        
        1. Acceda a "Configuraci√≥n > Personalizaci√≥n".
        2. Seleccione el tema visual (claro, oscuro o alto contraste).
        3. Ajuste el tama√±o de texto y elementos visuales.
        4. La configuraci√≥n se guarda por usuario.
        """)
        
        st.subheader("Copias de seguridad")
        st.write("""
        Para gestionar copias de seguridad:
        
        1. Acceda a "Configuraci√≥n > Base de Datos > Gesti√≥n de Copias".
        2. Desde all√≠ puede:
           - Crear nuevas copias de seguridad
           - Ver copias existentes con sus fechas y contenido
           - Restaurar desde una copia
           - Exportar copias para almacenamiento externo
        
        El sistema tambi√©n crea autom√°ticamente copias de seguridad peri√≥dicas.
        """)
        
        st.warning("‚ö†Ô∏è La restauraci√≥n de copias de seguridad sobrescribe los datos actuales. Use esta funci√≥n con precauci√≥n.")
    
    # Secci√≥n de resoluci√≥n de problemas
    elif selected_section == "Resoluci√≥n de Problemas":
        st.header("Resoluci√≥n de Problemas")
        
        st.write("""
        Esta secci√≥n proporciona soluciones a problemas comunes que pueden surgir durante el uso del sistema.
        """)
        
        st.subheader("Problemas de inicio de sesi√≥n")
        
        problemas_login = [
            ("**No puedo iniciar sesi√≥n**", """
            - Verifique que est√° ingresando el usuario y contrase√±a correctos.
            - Las credenciales distinguen entre may√∫sculas y min√∫sculas.
            - Si olvid√≥ su contrase√±a, contacte al administrador del sistema.
            """),
            
            ("**La sesi√≥n expira muy r√°pido**", """
            - El tiempo de inactividad para cierre autom√°tico de sesi√≥n es de 30 minutos.
            - Este valor puede ser modificado por el administrador del sistema.
            """)
        ]
        
        for titulo, solucion in problemas_login:
            st.markdown(titulo)
            st.markdown(solucion)
        
        st.subheader("Problemas con veh√≠culos")
        
        problemas_vehiculos = [
            ("**No puedo agregar un veh√≠culo con una patente existente**", """
            - Las patentes son identificadores √∫nicos en el sistema.
            - Si necesita registrar un veh√≠culo con una patente ya existente, primero debe eliminar o modificar el registro anterior.
            """),
            
            ("**Los datos de kilometraje no se actualizan**", """
            - El kilometraje se actualiza autom√°ticamente al registrar un servicio.
            - Tambi√©n puede actualizarlo manualmente desde "Editar Veh√≠culo".
            - Verifique que est√° ingresando un valor v√°lido (num√©rico y mayor al kilometraje actual).
            """),
            
            ("**No aparecen todas las columnas en la tabla de veh√≠culos**", """
            - Use la opci√≥n "Opciones de tabla" para seleccionar qu√© columnas mostrar.
            - Tambi√©n puede ajustar el n√∫mero de registros por p√°gina.
            """)
        ]
        
        for titulo, solucion in problemas_vehiculos:
            st.markdown(titulo)
            st.markdown(solucion)
        
        st.subheader("Problemas con servicios y mantenimientos")
        
        problemas_servicios = [
            ("**No puedo marcar un mantenimiento como completado**", """
            - Verifique que tiene los permisos necesarios (rol gestor o administrador).
            - Aseg√∫rese de que el mantenimiento no est√° ya marcado como completado o cancelado.
            """),
            
            ("**No se env√≠an recordatorios de mantenimiento**", """
            - Verifique que hay direcciones de correo configuradas en "Configuraci√≥n > Recordatorios".
            - Confirme que las credenciales de correo del sistema est√°n configuradas correctamente.
            - Compruebe que los mantenimientos tienen la opci√≥n "Generar recordatorio" activada.
            """),
            
            ("**La extracci√≥n OCR no funciona correctamente**", """
            - El OCR funciona mejor con facturas escaneadas de forma clara y en formato PDF.
            - Algunas facturas pueden no ser reconocidas correctamente debido a su formato.
            - Siempre verifique manualmente la informaci√≥n extra√≠da antes de guardar.
            """)
        ]
        
        for titulo, solucion in problemas_servicios:
            st.markdown(titulo)
            st.markdown(solucion)
        
        st.subheader("Problemas con reportes y estad√≠sticas")
        
        problemas_reportes = [
            ("**Los gr√°ficos no muestran datos**", """
            - Verifique que hay suficientes datos para generar estad√≠sticas.
            - Algunas visualizaciones requieren un m√≠nimo de registros para ser significativas.
            - Compruebe los filtros aplicados, pueden estar excluyendo todos los datos.
            """),
            
            ("**No puedo exportar reportes**", """
            - Verifique que hay datos disponibles para exportar.
            - Aseg√∫rese de que tiene permisos para exportar datos.
            - Compruebe que el formato seleccionado (Excel, CSV) es compatible con su sistema.
            """),
            
            ("**Los reportes enviados por email no llegan**", """
            - Verifique que la direcci√≥n de correo es correcta.
            - Compruebe la carpeta de spam o correo no deseado.
            - Confirme que las credenciales de correo del sistema est√°n configuradas correctamente.
            """)
        ]
        
        for titulo, solucion in problemas_reportes:
            st.markdown(titulo)
            st.markdown(solucion)
        
        st.subheader("Problemas t√©cnicos")
        
        problemas_tecnicos = [
            ("**El sistema est√° lento**", """
            - El rendimiento puede verse afectado si hay muchos usuarios simult√°neos.
            - Las operaciones con grandes vol√∫menes de datos pueden tardar m√°s tiempo.
            - Considere reducir el rango de datos en consultas y reportes.
            """),
            
            ("**Error al restaurar copia de seguridad**", """
            - Verifique que la copia de seguridad no est√° corrupta.
            - Aseg√∫rese de que no hay operaciones en curso durante la restauraci√≥n.
            - Contacte con soporte t√©cnico si el problema persiste.
            """),
            
            ("**Archivo PDF no se puede adjuntar**", """
            - El tama√±o m√°ximo para archivos PDF es de 10MB.
            - Verifique que el archivo es un PDF v√°lido.
            - Intente optimizar el PDF para reducir su tama√±o.
            """)
        ]
        
        for titulo, solucion in problemas_tecnicos:
            st.markdown(titulo)
            st.markdown(solucion)
        
        st.subheader("Contacto de soporte")
        
        st.write("""
        Si encuentra problemas que no puede resolver con esta gu√≠a, contacte con el soporte t√©cnico:
        
        - **Email**: soporte@flota-vehicular.gob.ar
        - **Tel√©fono**: (0XXX) 123-4567
        - **Horario de atenci√≥n**: Lunes a viernes de 8:00 a 16:00
        """)

def add_documentation_tooltips():
    """
    Funci√≥n para a√±adir documentaci√≥n en forma de tooltips a toda la aplicaci√≥n.
    Esta funci√≥n debe llamarse desde app.py para habilitar los tooltips.
    """
    # Aplicar tooltips a los elementos de la interfaz
    # Este c√≥digo se ejecutar√° cuando se importe este m√≥dulo
    # y nos permitir√° referenciar los tooltips desde cualquier parte de la app
    
    st.write("""
    <style>
    /* Estilos para tooltips */
    .tooltip {
        position: relative;
        display: inline-block;
        border-bottom: 1px dotted blue;
        cursor: help;
    }

    .tooltip .tooltiptext {
        visibility: hidden;
        width: 200px;
        background-color: #f0f0f0;
        color: #333;
        text-align: center;
        border-radius: 6px;
        padding: 5px;
        position: absolute;
        z-index: 1;
        bottom: 125%;
        left: 50%;
        margin-left: -100px;
        opacity: 0;
        transition: opacity 0.3s;
        border: 1px solid #ccc;
        font-size: 0.8em;
    }

    .tooltip:hover .tooltiptext {
        visibility: visible;
        opacity: 1;
    }
    </style>
    """, unsafe_allow_html=True)


# Funci√≥n para crear un tutorial guiado
def show_tutorial():
    """
    Muestra un tutorial paso a paso para nuevos usuarios.
    """
    st.title("Tutorial Guiado - Sistema de Gesti√≥n de Flota Vehicular")
    
    # Estado actual del tutorial
    if 'tutorial_step' not in st.session_state:
        st.session_state.tutorial_step = 1
    
    # Funci√≥n para avanzar al siguiente paso
    def next_step():
        st.session_state.tutorial_step += 1
    
    # Funci√≥n para volver al paso anterior
    def prev_step():
        st.session_state.tutorial_step -= 1
    
    # Pasos del tutorial
    total_steps = 5
    
    # Barra de progreso
    st.progress(st.session_state.tutorial_step / total_steps)
    
    # Contenido seg√∫n el paso actual
    if st.session_state.tutorial_step == 1:
        st.header("Paso 1: Introducci√≥n al Sistema")
        
        st.write("""
        Bienvenido al Sistema de Gesti√≥n de Flota Vehicular. Este tutorial le guiar√° a trav√©s
        de las principales funcionalidades del sistema.
        
        El sistema le permite:
        - Gestionar informaci√≥n completa de veh√≠culos
        - Registrar y programar mantenimientos
        - Documentar incidentes
        - Generar reportes y estad√≠sticas
        - Recibir alertas sobre mantenimientos y documentaci√≥n
        """)
        
        # Mostrar imagen de la pantalla principal si existe
        if os.path.exists(IMAGES.get('main_screen', '')):
            try:
                image = Image.open(IMAGES['main_screen'])
                st.image(image, caption="Pantalla principal del sistema", use_column_width=True)
            except Exception as e:
                logger.error(f"Error al cargar imagen: {str(e)}")
        
        st.button("Siguiente ‚Üí", on_click=next_step)
    
    elif st.session_state.tutorial_step == 2:
        st.header("Paso 2: Gesti√≥n de Veh√≠culos")
        
        st.write("""
        La gesti√≥n de veh√≠culos es la base del sistema. Desde aqu√≠ puede:
        
        1. **Ver veh√≠culos**: Consultar el listado completo de veh√≠culos y sus detalles.
        2. **Agregar veh√≠culos**: Registrar nuevas unidades en el sistema.
        3. **Editar veh√≠culos**: Modificar datos de unidades existentes.
        
        Para agregar un veh√≠culo:
        - Seleccione "Agregar Veh√≠culo" en el men√∫ lateral.
        - Complete el formulario con los datos del veh√≠culo.
        - Haga clic en "Guardar".
        """)
        
        # Mostrar imagen del formulario si existe
        if os.path.exists(IMAGES.get('vehicle_form', '')):
            try:
                image = Image.open(IMAGES['vehicle_form'])
                st.image(image, caption="Formulario de veh√≠culo", use_column_width=True)
            except Exception as e:
                logger.error(f"Error al cargar imagen: {str(e)}")
        
        col1, col2 = st.columns(2)
        with col1:
            st.button("‚Üê Anterior", on_click=prev_step)
        with col2:
            st.button("Siguiente ‚Üí", key="next2", on_click=next_step)
    
    elif st.session_state.tutorial_step == 3:
        st.header("Paso 3: Mantenimientos y Servicios")
        
        st.write("""
        El sistema permite gestionar el mantenimiento de los veh√≠culos:
        
        1. **Registrar service**: Documentar mantenimientos realizados.
        2. **Historial de service**: Consultar todo el historial de servicios.
        3. **Programar mantenimiento**: Planificar futuros mantenimientos.
        
        Para registrar un servicio:
        - Seleccione "Registrar Service" en el men√∫ lateral.
        - Seleccione el veh√≠culo y complete los detalles del servicio.
        - Puede adjuntar facturas u otros documentos PDF.
        - El sistema puede extraer autom√°ticamente datos de las facturas.
        """)
        
        # Mostrar imagen del historial de servicios si existe
        if os.path.exists(IMAGES.get('service_history', '')):
            try:
                image = Image.open(IMAGES['service_history'])
                st.image(image, caption="Historial de servicios", use_column_width=True)
            except Exception as e:
                logger.error(f"Error al cargar imagen: {str(e)}")
        
        col1, col2 = st.columns(2)
        with col1:
            st.button("‚Üê Anterior", key="prev3", on_click=prev_step)
        with col2:
            st.button("Siguiente ‚Üí", key="next3", on_click=next_step)
    
    elif st.session_state.tutorial_step == 4:
        st.header("Paso 4: Reportes y Estad√≠sticas")
        
        st.write("""
        El sistema ofrece herramientas de an√°lisis y reportes:
        
        1. **Estad√≠sticas de flota**: Dashboard con indicadores clave.
        2. **Herramientas de reporte**: Exportaci√≥n de datos y env√≠o por email.
        3. **Gr√°ficos interactivos**: Visualizaciones para an√°lisis de datos.
        
        Para acceder a las estad√≠sticas:
        - Seleccione "Estad√≠sticas de Flota" en el men√∫ lateral.
        - Explore las diferentes pesta√±as con informaci√≥n.
        - Use los filtros para personalizar las visualizaciones.
        - Puede exportar datos o enviar reportes por email.
        """)
        
        # Mostrar imagen del dashboard si existe
        if os.path.exists(IMAGES.get('stats_dashboard', '')):
            try:
                image = Image.open(IMAGES['stats_dashboard'])
                st.image(image, caption="Dashboard de estad√≠sticas", use_column_width=True)
            except Exception as e:
                logger.error(f"Error al cargar imagen: {str(e)}")
        
        col1, col2 = st.columns(2)
        with col1:
            st.button("‚Üê Anterior", key="prev4", on_click=prev_step)
        with col2:
            st.button("Siguiente ‚Üí", key="next4", on_click=next_step)
    
    elif st.session_state.tutorial_step == 5:
        st.header("Paso 5: Configuraci√≥n y Personalizaci√≥n")
        
        st.write("""
        Para finalizar, explore las opciones de configuraci√≥n:
        
        1. **Configuraci√≥n del sistema**: Accesible desde "Configuraci√≥n" en el men√∫.
        2. **Respaldo de datos**: Cree copias de seguridad regularmente.
        3. **Personalizaci√≥n**: Ajuste el tema y preferencias visuales.
        
        Recuerde:
        - La configuraci√≥n del sistema requiere permisos de administrador.
        - El sistema de recordatorios debe configurarse para recibir alertas.
        - Puede consultar el manual de usuario para informaci√≥n detallada.
        """)
        
        st.success("""
        ¬°Felicidades! Ha completado el tutorial b√°sico del Sistema de Gesti√≥n de Flota Vehicular.
        
        Para obtener m√°s informaci√≥n, consulte el manual de usuario completo o contacte con soporte.
        """)
        
        col1, col2 = st.columns(2)
        with col1:
            st.button("‚Üê Anterior", key="prev5", on_click=prev_step)
        with col2:
            # Bot√≥n para reiniciar el tutorial o ir a la aplicaci√≥n
            if st.button("Ir a la aplicaci√≥n"):
                st.session_state.tutorial_step = 1
                st.session_state.page = 'home'
                st.rerun()

# Esta variable almacena los tooltips para poder accederlos desde cualquier parte de la app
tooltips = TOOLTIPS