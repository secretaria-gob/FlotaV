import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import os
import time
import io
import traceback
import database as db
import secure_database as sdb
from auth import check_authentication, get_user_role
from logger import get_logger, log_exception, log_access
from validators import validar_patente, validar_entero_positivo, validar_fecha
from theme_manager import apply_custom_css, theme_selector, get_current_theme
from documentation import get_tooltip_html, styled_header, display_manual, show_tutorial
from pagination import crear_tabla_paginada, tabla_filtrable
from backup_manager import interfaz_backup_sqlite
from ocr_processor import procesar_pdfs_para_service, mostrar_resultados_ocr, buscar_texto_en_pdfs
from analytics import dashboard_analitica, visualizar_costos_mantenimiento

# Configurar logger principal
logger = get_logger('app')

# Configurar p√°gina
st.set_page_config(
    page_title="Sistema de Gesti√≥n de Flota Vehicular",
    page_icon="üöó",
    layout="wide"
)

# Aplicar CSS personalizado basado en el tema seleccionado
apply_custom_css()

# Inicializar base de datos
try:
    db.init_database()
    # Tambi√©n inicializar o actualizar la base de datos segura si es necesario
    if hasattr(sdb, 'init_database'):
        sdb.init_database()
except Exception as e:
    log_exception(logger, e, "Error cr√≠tico al inicializar base de datos")
    st.error("Error al inicializar la base de datos. Por favor contacte al administrador del sistema.")
    st.error(f"Detalles: {str(e)}")
    st.stop()

# Verificar autenticaci√≥n
auth_status, user_name, username = check_authentication()
if not auth_status:
    # La funci√≥n de autenticaci√≥n maneja todo el proceso de inicio de sesi√≥n
    st.stop()

# Registrar acceso exitoso
log_access(username, 'login')

# Obtener rol del usuario
user_role = get_user_role(username)

# Inicializar estado de sesi√≥n
if 'page' not in st.session_state:
    st.session_state.page = 'home'

# Navegaci√≥n en barra lateral
with st.sidebar:
    st.title("Men√∫")
    
    # Bot√≥n Inicio
    if st.button("Inicio", use_container_width=True):
        st.session_state.page = 'home'
        log_access(username, 'navigate', 'Inicio')
    
    # Secci√≥n Veh√≠culos
    st.subheader("Veh√≠culos")
    if st.button("Ver Veh√≠culos", use_container_width=True):
        st.session_state.page = 'view_vehicles'
        log_access(username, 'navigate', 'Ver Veh√≠culos')
    
    if user_role in ['admin', 'manager']:
        if st.button("Agregar Veh√≠culo", use_container_width=True):
            st.session_state.page = 'add_vehicle'
            log_access(username, 'navigate', 'Agregar Veh√≠culo')
        
        if st.button("Editar Veh√≠culo", use_container_width=True):
            st.session_state.page = 'edit_vehicle'
            log_access(username, 'navigate', 'Editar Veh√≠culo')
    
    # Secci√≥n Mantenimiento
    st.subheader("Mantenimiento")
    if st.button("Registrar Service", use_container_width=True):
        st.session_state.page = 'add_service'
        log_access(username, 'navigate', 'Registrar Service')
    
    if st.button("Historial de Service", use_container_width=True):
        st.session_state.page = 'service_history'
        log_access(username, 'navigate', 'Historial de Service')
    
    if st.button("Registrar Incidente", use_container_width=True):
        st.session_state.page = 'add_incident'
        log_access(username, 'navigate', 'Registrar Incidente')
    
    if st.button("Ver Incidentes", use_container_width=True):
        st.session_state.page = 'view_incidents'
        log_access(username, 'navigate', 'Ver Incidentes')
    
    if st.button("Programar Mantenimiento", use_container_width=True):
        st.session_state.page = 'schedule_maintenance'
        log_access(username, 'navigate', 'Programar Mantenimiento')
    
    if st.button("Ver Programaci√≥n", use_container_width=True):
        st.session_state.page = 'view_schedules'
        log_access(username, 'navigate', 'Ver Programaci√≥n')
    
    # Secci√≥n Reportes
    st.subheader("Reportes")
    if st.button("Estad√≠sticas de Flota", use_container_width=True):
        st.session_state.page = 'fleet_stats'
        log_access(username, 'navigate', 'Estad√≠sticas de Flota')
        
    if st.button("An√°lisis de Costos", use_container_width=True):
        st.session_state.page = 'cost_analysis'
        log_access(username, 'navigate', 'An√°lisis de Costos')
    
    # Secci√≥n Administraci√≥n
    if user_role == 'admin':
        st.subheader("Administraci√≥n")
        if st.button("Configuraci√≥n", use_container_width=True):
            st.session_state.page = 'admin_settings'
            log_access(username, 'navigate', 'Configuraci√≥n')
    
    # Secci√≥n Ayuda
    st.subheader("Ayuda")
    if st.button("Manual de Usuario", use_container_width=True):
        st.session_state.page = 'user_manual'
        log_access(username, 'navigate', 'Manual de Usuario')
    
    if st.button("Tutorial Guiado", use_container_width=True):
        st.session_state.page = 'tutorial'
        log_access(username, 'navigate', 'Tutorial Guiado')
    
    # Informaci√≥n de usuario
    st.sidebar.markdown("---")
    st.sidebar.info(f"Usuario: **{user_name}**  \nRol: **{user_role.capitalize()}**")
    
    # Bot√≥n de cierre de sesi√≥n
    if st.button("Cerrar Sesi√≥n", key="logout_btn"):
        # Vaciar el estado de sesi√≥n excepto las variables de autenticaci√≥n
        for key in list(st.session_state.keys()):
            if key != 'authenticated':
                if key in st.session_state:
                    del st.session_state[key]
        
        # Marcar como no autenticado
        st.session_state.authenticated = False
        log_access(username, 'logout')
        st.rerun()

# Funci√≥n para la p√°gina de inicio
def home_page():
    st.title("Sistema de Gesti√≥n de Flota Vehicular üöó")
    
    col1, col2 = st.columns(2)
    
    with col1:
        styled_header("Resumen de Flota", "flota")
        
        try:
            vehicles = db.load_vehicles()
            st.info(f"Total veh√≠culos: {len(vehicles)}")
            
            # Contar por estado
            if not vehicles.empty:
                status_counts = vehicles['estado'].value_counts()
                for status, count in status_counts.items():
                    if status == "SERVICIO":
                        st.success(f"‚úÖ En servicio: {count}")
                    elif status == "RECUPERAR":
                        st.warning(f"‚ö†Ô∏è Para recuperar: {count}")
                    elif status == "RADIADO":
                        st.error(f"‚ùå Radiados: {count}")
                    else:
                        st.write(f"{status}: {count}")
        except Exception as e:
            log_exception(logger, e, "Error al cargar datos en p√°gina de inicio")
            st.error(f"Error al cargar los datos: {str(e)}")
    
    with col2:
        styled_header("Acciones R√°pidas", "acciones")
        
        if st.button("‚≠ê Ver todos los veh√≠culos", use_container_width=True):
            st.session_state.page = 'view_vehicles'
            st.rerun()
        
        if user_role in ['admin', 'manager']:
            if st.button("‚ûï Agregar nuevo veh√≠culo", use_container_width=True):
                st.session_state.page = 'add_vehicle'
                st.rerun()
        
        if st.button("üîß Registrar service", use_container_width=True):
            st.session_state.page = 'add_service'
            st.rerun()
        
        if st.button("üìä Ver estad√≠sticas", use_container_width=True):
            st.session_state.page = 'fleet_stats'
            st.rerun()
    
    # Incidentes recientes
    styled_header("Incidentes Recientes", "incidentes", "üö®")
    
    try:
        incidents = db.get_incidents(estado="PENDIENTE")
        if not incidents.empty:
            # Usar funci√≥n de paginaci√≥n para mostrar tabla
            crear_tabla_paginada(
                incidents[['patente', 'marca', 'modelo', 'fecha', 'tipo', 'descripcion']], 
                page_size=5,
                key_prefix="home_incidents"
            )
        else:
            st.info("No hay incidentes pendientes registrados.")
    except Exception as e:
        log_exception(logger, e, "Error al cargar incidentes en p√°gina de inicio")
        st.error(f"Error al cargar incidentes: {str(e)}")
    
    # Mantenimientos programados pr√≥ximos
    styled_header("Mantenimientos Pr√≥ximos", "mantenimiento", "üìÖ")
    
    try:
        scheduled_maintenance = db.get_maintenance_schedules(estado="PENDIENTE", proximos_dias=30)
        if not scheduled_maintenance.empty:
            display_cols = ['patente', 'marca', 'modelo', 'fecha_programada', 'tipo_service']
            
            crear_tabla_paginada(
                scheduled_maintenance[display_cols],
                page_size=5,
                key_prefix="home_maintenance"
            )
            
            if st.button("Ver todos los mantenimientos programados"):
                st.session_state.page = 'view_schedules'
                st.rerun()
        else:
            st.info("No hay mantenimientos programados para los pr√≥ximos 30 d√≠as.")
    except Exception as e:
        log_exception(logger, e, "Error al cargar mantenimientos en p√°gina de inicio")
        st.error(f"Error al cargar mantenimientos programados: {str(e)}")

# Funci√≥n para la p√°gina de listado de veh√≠culos
def view_vehicles_page():
    styled_header("Listado de Veh√≠culos", "vehiculos", "üöó")
    
    # Crear tabla filtrable con b√∫squeda y paginaci√≥n
    try:
        # Obtener veh√≠culos
        vehicles = db.load_vehicles()
        
        if vehicles.empty:
            st.info("No hay veh√≠culos registrados en el sistema.")
            return
        
        # Configurar filtros
        filtros = {
            'area': {'titulo': 'Filtrar por √°rea'},
            'tipo': {'titulo': 'Filtrar por tipo'},
            'estado': {'titulo': 'Filtrar por estado'}
        }
        
        # Usar componente de tabla filtrable
        df_filtrado = tabla_filtrable(
            vehicles, 
            filtros=filtros,
            texto_busqueda=True,
            titulo="",
            page_size=10,
            key_prefix="view_vehicles"
        )
        
        # Seleccionar veh√≠culo para ver detalles
        st.subheader("Detalles del Veh√≠culo")
        
        patentes = df_filtrado['patente'].tolist()
        selected_patente = st.selectbox(
            "Seleccionar veh√≠culo para ver detalles:", 
            [""] + patentes
        )
        
        if selected_patente:
            vehicle = db.get_vehicle_by_patente(selected_patente)
            if vehicle:
                # Mostrar detalles en dos columnas
                col1, col2 = st.columns(2)
                
                with col1:
                    st.write(f"**Patente:** {vehicle['patente']}")
                    st.write(f"**√Årea:** {vehicle['area']}")
                    st.write(f"**Tipo:** {vehicle['tipo']}")
                    st.write(f"**Marca:** {vehicle['marca']}")
                    st.write(f"**Modelo:** {vehicle['modelo']}")
                    st.write(f"**A√±o:** {vehicle['a√±o']}")
                
                with col2:
                    st.write(f"**Estado:** {vehicle['estado']}")
                    st.write(f"**Kilometraje:** {vehicle['km']} km")
                    st.write(f"**√öltimo service:** {vehicle['fecha_service'] or 'No registrado'}")
                    st.write(f"**Taller:** {vehicle['taller'] or 'No registrado'}")
                    if vehicle.get('id_vehiculo'):
                        st.write(f"**ID Veh√≠culo:** {vehicle['id_vehiculo']}")
                    if vehicle.get('rori'):
                        st.write(f"**RORI:** {vehicle['rori']}")
                    if vehicle.get('vtv_vencimiento'):
                        st.write(f"**Vencimiento VTV:** {vehicle['vtv_vencimiento']}")
                
                # Observaciones
                st.write("**Observaciones:**")
                st.write(vehicle['observaciones'] or "Sin observaciones")
                
                # Mostrar enlaces de PDF si existen
                if vehicle.get('pdf_files'):
                    st.write("**Documentaci√≥n adjunta:**")
                    pdf_links = db.get_pdf_download_links(vehicle['pdf_files'])
                    if pdf_links:
                        st.markdown(pdf_links, unsafe_allow_html=True)
                    else:
                        st.write("Error al cargar los archivos adjuntos.")
                
                # Acciones adicionales
                st.subheader("Acciones")
                col1, col2, col3, col4 = st.columns(4)
                
                with col1:
                    if st.button("Ver historial de service", key="btn_hist_service"):
                        st.session_state.selected_vehicle = selected_patente
                        st.session_state.page = 'service_history'
                        st.rerun()
                
                with col2:
                    if st.button("Registrar service", key="btn_reg_service"):
                        st.session_state.selected_vehicle = selected_patente
                        st.session_state.page = 'add_service'
                        st.rerun()
                
                with col3:
                    if st.button("Programar mantenimiento", key="btn_prog_maint"):
                        st.session_state.selected_vehicle = selected_patente
                        st.session_state.page = 'schedule_maintenance'
                        st.rerun()
                
                with col4:
                    if user_role in ['admin', 'manager'] and st.button("Editar veh√≠culo", key="btn_edit"):
                        st.session_state.selected_vehicle = selected_patente
                        st.session_state.page = 'edit_vehicle'
                        st.rerun()
                
                # Si es administrador, mostrar opci√≥n para eliminar
                if user_role == 'admin':
                    if st.button("‚ö†Ô∏è Eliminar veh√≠culo", key="btn_delete"):
                        # Modal de confirmaci√≥n
                        confirm = st.checkbox(
                            "Confirmo que quiero eliminar este veh√≠culo y todos sus registros asociados.", 
                            key="confirm_delete"
                        )
                        
                        if confirm and st.button("CONFIRMAR ELIMINACI√ìN", key="btn_confirm_delete"):
                            success, message = db.delete_vehicle(selected_patente)
                            if success:
                                st.success(message)
                                time.sleep(2)
                                st.rerun()
                            else:
                                st.error(message)
    
    except Exception as e:
        log_exception(logger, e, "Error en p√°gina de listado de veh√≠culos")
        st.error(f"Error al cargar o procesar veh√≠culos: {str(e)}")

# Las dem√°s funciones de p√°ginas se implementar√≠an de forma similar
# add_vehicle_page(), edit_vehicle_page(), add_service_page(), etc.

def admin_settings_page():
    styled_header("Configuraci√≥n del Sistema", "configuracion", "‚öôÔ∏è")
    
    if user_role != 'admin':
        st.error("No tiene permisos para acceder a esta secci√≥n.")
        if st.button("Volver"):
            st.session_state.page = 'home'
            st.rerun()
        return
    
    # Crear pesta√±as para diferentes secciones
    tabs = st.tabs([
        "Base de Datos", 
        "Importaci√≥n de Datos", 
        "Tema y Apariencia", 
        "Copias de Seguridad",
        "Recordatorios"
    ])
    
    # Tab: Base de Datos
    with tabs[0]:
        styled_header("Base de Datos", "database", "üíæ")
        
        st.info("Desde aqu√≠ puede administrar la base de datos del sistema.")
        
        if st.button("Inicializar Base de Datos"):
            with st.spinner("Inicializando base de datos..."):
                success = db.init_database()
                if success:
                    st.success("Base de datos inicializada correctamente.")
                else:
                    st.error("Error al inicializar la base de datos.")
        
        st.write("Esta acci√≥n crear√° las tablas necesarias si no existen.")
        
        # Mostrar informaci√≥n de la base de datos
        st.subheader("Informaci√≥n de la Base de Datos")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.write(f"**Tipo de base de datos:** {'PostgreSQL' if db.USE_POSTGRES else 'SQLite (standalone)'}")
            if not db.USE_POSTGRES:
                st.write(f"**Ubicaci√≥n:** {db.get_database_path()}")
        
        with col2:
            # Obtener estad√≠sticas
            try:
                engine = db.get_sqlalchemy_engine()
                
                # Contar registros en cada tabla
                tablas = {
                    "vehiculos": "SELECT COUNT(*) FROM vehiculos",
                    "historial_service": "SELECT COUNT(*) FROM historial_service",
                    "incidentes": "SELECT COUNT(*) FROM incidentes",
                    "programacion_mantenimiento": "SELECT COUNT(*) FROM programacion_mantenimiento"
                }
                
                for tabla, query in tablas.items():
                    result = pd.read_sql(query, engine)
                    count = result.iloc[0, 0]
                    st.write(f"**Registros en {tabla}:** {count}")
            
            except Exception as e:
                log_exception(logger, e, "Error al obtener estad√≠sticas de BD")
                st.error(f"Error al obtener estad√≠sticas: {str(e)}")
    
    # Tab: Importaci√≥n de Datos
    with tabs[1]:
        styled_header("Importaci√≥n de Datos", "import", "üì§")
        
        st.write("Desde aqu√≠ puede importar datos masivamente desde archivos CSV.")
        
        # Importar veh√≠culos
        st.write("### Importar Veh√≠culos")
        st.write("""
        Por favor, aseg√∫rese que el archivo CSV tenga las siguientes columnas:
        - patente/dominio (obligatorio)
        - √°rea/dependencia
        - tipo de veh√≠culo
        - marca
        - modelo
        - a√±o
        - estado (por defecto: SERVICIO)
        - km (por defecto: 0)
        """)
        
        uploaded_file = st.file_uploader(
            "Seleccionar archivo CSV", 
            type=['csv'], 
            key="admin_csv_uploader"
        )
        
        if uploaded_file:
            st.write("Vista previa del archivo:")
            
            df = db.process_uploaded_file(uploaded_file)
            if df is not None:
                # Mostrar primeras filas
                st.dataframe(df.head())
                
                col1, col2 = st.columns(2)
                with col1:
                    confirm_import = st.button("Importar veh√≠culos", key="admin_import_btn")
                with col2:
                    cancel_import = st.button("Cancelar", key="admin_cancel_btn")
                
                if confirm_import:
                    with st.spinner("Importando veh√≠culos..."):
                        success_count, error_count, error_plates = db.import_vehicles_from_df(df)
                        st.success(f"Importaci√≥n completada: {success_count} veh√≠culos importados correctamente.")
                        if error_count > 0:
                            st.warning(f"{error_count} veh√≠culos no pudieron ser importados.")
                            st.write("Patentes con error:", ", ".join(error_plates[:10]) + ("..." if len(error_plates) > 10 else ""))
    
    # Tab: Tema y Apariencia
    with tabs[2]:
        styled_header("Tema y Apariencia", "theme", "üé®")
        
        # Usar el componente de selecci√≥n de tema
        theme_selector()
    
    # Tab: Copias de Seguridad
    with tabs[3]:
        styled_header("Copias de Seguridad", "backup", "üì¶")
        
        if not db.USE_POSTGRES:
            # Para SQLite, usar el componente de gesti√≥n de copias
            interfaz_backup_sqlite(db.get_database_path())
        else:
            st.warning("Las copias de seguridad manuales no est√°n disponibles para PostgreSQL. Por favor, contacte al administrador del sistema para gestionar copias de seguridad.")
    
    # Tab: Recordatorios
    with tabs[4]:
        styled_header("Configuraci√≥n de Recordatorios", "reminders", "üîî")
        
        st.info("Configure direcciones de correo electr√≥nico para recibir recordatorios de mantenimientos programados y vencimientos de VTV.")
        
        # Verificar si tenemos las credenciales de email configuradas
        email_configured = all(key in os.environ for key in ["EMAIL_HOST", "EMAIL_PORT", "EMAIL_USER", "EMAIL_PASSWORD"])
        
        if not email_configured:
            st.warning("La funcionalidad de recordatorios por correo electr√≥nico requiere configurar las credenciales SMTP.")
            st.info("Para enviar correos, necesita agregar las siguientes variables de entorno: EMAIL_HOST, EMAIL_PORT, EMAIL_USER, EMAIL_PASSWORD")
        
        # Configuraci√≥n de correos electr√≥nicos para notificaciones
        try:
            if 'email_recipients' not in st.session_state:
                st.session_state.email_recipients = []
            
            # Mostrar los correos electr√≥nicos actuales
            if st.session_state.email_recipients:
                st.write("Correos electr√≥nicos configurados:")
                for i, email in enumerate(st.session_state.email_recipients):
                    col1, col2 = st.columns([3, 1])
                    with col1:
                        st.text(email)
                    with col2:
                        if st.button("Eliminar", key=f"delete_email_{i}"):
                            st.session_state.email_recipients.pop(i)
                            st.rerun()
            
            # Agregar nuevo correo electr√≥nico
            with st.form("email_form"):
                new_email = st.text_input("Nuevo correo electr√≥nico:")
                submit = st.form_submit_button("Agregar")
                
                if submit and new_email:
                    # Validar formato de email
                    import re
                    if re.match(r"[^@]+@[^@]+\.[^@]+", new_email):
                        if new_email not in st.session_state.email_recipients:
                            st.session_state.email_recipients.append(new_email)
                            st.success(f"Correo {new_email} agregado correctamente.")
                            st.rerun()
                        else:
                            st.error("Este correo electr√≥nico ya est√° en la lista.")
                    else:
                        st.error("Por favor, ingrese un correo electr√≥nico v√°lido.")
            
            # Configuraci√≥n de par√°metros de recordatorios
            st.subheader("Par√°metros de Recordatorios")
            
            col1, col2 = st.columns(2)
            
            with col1:
                dias_vtv = st.slider(
                    "D√≠as de anticipaci√≥n para alertas de VTV:",
                    min_value=7,
                    max_value=60,
                    value=30,
                    step=1
                )
            
            with col2:
                dias_mant = st.slider(
                    "D√≠as de anticipaci√≥n para alertas de mantenimiento:",
                    min_value=1,
                    max_value=30,
                    value=7,
                    step=1
                )
            
            if st.button("Guardar configuraci√≥n de recordatorios"):
                # En una aplicaci√≥n real, aqu√≠ guardar√≠amos esta configuraci√≥n en la base de datos
                st.success("Configuraci√≥n guardada correctamente.")
                
                # Proceso de env√≠o de recordatorios (simulado)
                if st.session_state.email_recipients and email_configured:
                    with st.spinner("Enviando recordatorios pendientes..."):
                        time.sleep(2)  # Simulaci√≥n de procesamiento
                        st.success("Recordatorios enviados correctamente.")
        
        except Exception as e:
            log_exception(logger, e, "Error en configuraci√≥n de recordatorios")
            st.error(f"Error en la configuraci√≥n de recordatorios: {str(e)}")

def user_manual_page():
    # Usar el componente de documentaci√≥n
    display_manual()

def tutorial_page():
    # Usar el componente de tutorial guiado
    show_tutorial()

def fleet_stats_page():
    styled_header("Estad√≠sticas de Flota", "estadisticas", "üìä")
    
    try:
        # Cargar datos necesarios
        df_vehiculos = db.load_vehicles()
        df_services = db.get_service_history()
        df_incidentes = db.get_incidents()
        df_mantenimientos = db.get_maintenance_schedules()
        
        # Usar el componente de dashboard anal√≠tico
        dashboard_analitica(df_vehiculos, df_services, df_incidentes, df_mantenimientos)
    
    except Exception as e:
        log_exception(logger, e, "Error al cargar estad√≠sticas de flota")
        st.error(f"Error al cargar estad√≠sticas: {str(e)}")

def cost_analysis_page():
    styled_header("An√°lisis de Costos de Mantenimiento", "costos", "üí∞")
    
    try:
        # Cargar datos necesarios
        df_vehiculos = db.load_vehicles()
        df_services = db.get_service_history()
        
        # Usar el componente de an√°lisis de costos
        visualizar_costos_mantenimiento(df_services, df_vehiculos)
    
    except Exception as e:
        log_exception(logger, e, "Error al cargar an√°lisis de costos")
        st.error(f"Error al cargar an√°lisis de costos: {str(e)}")

# Funci√≥n b√°sica para p√°ginas pendientes de implementaci√≥n completa
def page_in_development(title="P√°gina en Desarrollo", icon="üõ†Ô∏è"):
    styled_header(title, None, icon)
    st.info(f"Esta funcionalidad est√° en desarrollo. Pronto estar√° disponible la versi√≥n completa.")
    st.warning("Vuelva a la p√°gina principal o pruebe otra secci√≥n.")
    
    if st.button("Volver a la p√°gina principal"):
        st.session_state.page = 'home'
        st.rerun()

# Implementaci√≥n b√°sica de las p√°ginas de mantenimiento
def add_vehicle_page():
    page_in_development("Agregar Veh√≠culo", "üöó")

def edit_vehicle_page():
    page_in_development("Editar Veh√≠culo", "‚úèÔ∏è")

def add_service_page():
    page_in_development("Registrar Service", "üîß")

def service_history_page():
    page_in_development("Historial de Service", "üìã")

def add_incident_page():
    page_in_development("Registrar Incidente", "üö®")

def view_incidents_page():
    page_in_development("Ver Incidentes", "‚ö†Ô∏è")

def schedule_maintenance_page():
    page_in_development("Programar Mantenimiento", "üóìÔ∏è")

def view_schedules_page():
    page_in_development("Ver Programaci√≥n", "üìÖ")

# Diccionario de p√°ginas
pages = {
    'home': home_page,
    'view_vehicles': view_vehicles_page,
    'add_vehicle': add_vehicle_page,
    'edit_vehicle': edit_vehicle_page,
    'add_service': add_service_page,
    'service_history': service_history_page,
    'add_incident': add_incident_page,
    'view_incidents': view_incidents_page,
    'schedule_maintenance': schedule_maintenance_page,
    'view_schedules': view_schedules_page,
    'fleet_stats': fleet_stats_page,
    'cost_analysis': cost_analysis_page,
    'admin_settings': admin_settings_page,
    'user_manual': user_manual_page,
    'tutorial': tutorial_page
}

# Renderizar la p√°gina seleccionada
try:
    if st.session_state.page in pages:
        # Registrar la navegaci√≥n de p√°gina
        log_access(username, 'view', st.session_state.page)
        
        # Renderizar la p√°gina
        pages[st.session_state.page]()
    else:
        st.error(f"P√°gina no encontrada: {st.session_state.page}")
        st.session_state.page = 'home'
        st.rerun()
except Exception as e:
    log_exception(logger, e, f"Error al renderizar p√°gina: {st.session_state.page}")
    st.error(f"Se produjo un error inesperado: {str(e)}")
    
    # Mostrar detalles del error solo para administradores
    if user_role == 'admin':
        with st.expander("Detalles del error (solo administradores)"):
            st.code(traceback.format_exc())
            
            # Opci√≥n para volver a la p√°gina de inicio
            if st.button("Volver a la p√°gina de inicio"):
                st.session_state.page = 'home'
                st.rerun()